{% raw %}

CMS.registerEditorComponent({
  // Internal id of the component
  id: "file-tag",
  // Visible label
  label: "Archivo o link destacado",
  // Fields the user need to fill out when adding an instance of the component
  fields: [
    {
      name: "title",
      label: "Título",
      widget: "string"
    },
    {
      name: "info",
      label: "Información (tamaño y formato)",
      widget: "string"
    },
    {
      name: "file",
      label: "Archivo", 
      widget: "file"
    },
    {
      name: "image",
      label: "Imagen", 
      widget: "image",
      default: "/assets/media/no_image-file.png",
      media_library: { config: { multiple: false } },
      media_folder: "/media/files/"
    },
    {
      name: "button_text",
      label: "Texto del botón",
      widget: "string"
    },
    {
      name: "button_icon",
      label: "Icono del botón",
      widget: "select",
      options: [
        { label: "Ninguno", value: "" },
        { label: "Descarga", value: "icon-download" }
      ]
    }
  ],
  // Regex pattern used to search for instances of this block in the markdown document.
  // Patterns are run in a multline environment (against the entire markdown document),
  // and so generally should make use of the multiline flag (`m`). If you need to capture
  // newlines in your capturing groups, you can either use something like
  // `([\S\s]*)`, or you can additionally enable the "dot all" flag (`s`),
  // which will cause `(.*)` to match newlines as well.
  //
  // Additionally, it's recommended that you use non-greedy capturing groups (e.g.
  // `(.*?)` vs `(.*)`), especially if matching against newline characters.
  pattern: /{% file { "title": "(.*)", "info": "(.*)", "file": "(.*)", "image": "(.*)", "button_text": "(.*)", "button_icon": "(.*)" } %}/,
  // Given a RegExp Match object
  // (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match#return_value),
  // return an object with one property for each field defined in `fields`.
  //
  // This is used to populate the custom widget in the markdown editor in the CMS.
  fromBlock: function(match) {
    const title = match[1];
    const info = match[2];
    const file = match[3];
    const image = match[4];
    const button_text = match[5];
    const button_icon = match[6];
    
    return { title, info, file, image, button_text, button_icon };
  },
  // Given an object with one property for each field defined in `fields`,
  // return the string you wish to be inserted into your markdown.
  //
  // This is used to serialize the data from the custom widget to the
  // markdown document
  toBlock: function(data) {
    return (
      `{% file { "title": "${data.title}", "info": "${data.info}", "file": "${data.file}", "image": "${data.image}", "button_text": "${data.button_text}", "button_icon": "${data.button_icon}" } %}`
    );
  },
  // Preview output for this component. Can either be a string or a React component
  // (component gives better render performance)
  toPreview: function(data) {
    return  `
      <section class="pj-file">
        <div class="pj-file__img">
          <img src="${data.image}"/>
        </div>
        <div class="pj-file__text">
          <span class="pj-file__text__title">${data.title}</span>
          <span class="pj-file__text__data">${data.info}</span>
        </div>
        <div class="pj-file__button">
          <a href="${data.file}" target="_blank" class="btn btn-negative">
            <span class="btn__icon btn__icon-left">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="svg-icon-download">
                <path fill="#ffffff" fill-rule="evenodd" d="M6 15.5v3h12v-3h2v4l-.9 1H5l-1-.9v-4.1h2zM13.4 4v10.1l2.9-3.1 1.2 1.2L13 17h-1l-4.5-4.8L8.7 11l2.9 3.1V4h1.8z"/>
              </svg>
            </span>

            <span class="btn__label">${data.button_text}</span>
          </a>
        </div>
      </section>
     `
  }
});
{% endraw %}

