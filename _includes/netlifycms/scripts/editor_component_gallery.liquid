{% raw %}

CMS.registerEditorComponent({
  // Internal id of the component
  id: 'gallery',
  // Visible label
  label: 'Galería',
  // Fields the user need to fill out when adding an instance of the component
  fields: [
    {
      name: 'images',
      label: 'Imágenes',
      widget: 'list',
      summary: '{{fields.caption | default: fields.alt}}',
      fields: [
        {
          name: 'path',
          label: 'Imagen',
          widget: 'image',
          default: '/assets/media/no_image-gallery.png',
          media_library: {
            media_folder: '/media/gallery/'
          }
        },
        {
          name: 'alt',
          label: 'Texto alternativo a la imagen',
          widget: 'string'
        },
        {
          name: 'caption',
          label: 'Pie de imagen',
          widget: 'string'
        },
        {
          name: 'credits',
          label: 'Créditos de la imagen',
          widget: 'string'
        },
        {
          name: 'bw',
          label: 'Blanco y negro',
          widget: 'boolean'
        }
      ]
    },
    {
      name: 'simple',
      label: 'Imagen simple',
      hint: 'Para adjuntar sólo una imagen con el mismo ancho que el artículo, sin pie de imagen ni créditos',
      widget: 'boolean'
    }
  ],
  // Regex pattern used to search for instances of this block in the markdown document.
  // Patterns are run in a multline environment (against the entire markdown document),
  // and so generally should make use of the multiline flag (`m`). If you need to capture
  // newlines in your capturing groups, you can either use something like
  // `([\S\s]*)`, or you can additionally enable the "dot all" flag (`s`),
  // which will cause `(.*)` to match newlines as well.
  //
  // Additionally, it's recommended that you use non-greedy capturing groups (e.g.
  // `(.*?)` vs `(.*)`), especially if matching against newline characters.
  pattern: /{% gallery { "simple": (.*), "images": (.*) } %}/,
  // Given a RegExp Match object
  // (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match#return_value),
  // return an object with one property for each field defined in `fields`.
  //
  // This is used to populate the custom widget in the markdown editor in the CMS.
  fromBlock: function(match) {
    const simple = JSON.parse(match[1]);
    const images = JSON.parse(match[2]);
    
    return { simple, images };
  },
  // Given an object with one property for each field defined in `fields`,
  // return the string you wish to be inserted into your markdown.
  //
  // This is used to serialize the data from the custom widget to the
  // markdown document
  toBlock: function(data) {
    const images = data.images || [];
    
    return (
      `{% gallery { "simple": ${!!data.simple}, "images": ${JSON.stringify(images)} } %}`
    );
  },
  // Preview output for this component. Can either be a string or a React component
  // (component gives better render performance)
  toPreview: function(data) {
    let images = data.images.map(image => {
      return `
        <div class="pj-gallery-images">
          <figure class="pj-gallery-image">
            <img src="${image.path}" alt="${image.alt}" class="${ image.bw ? 'bw' : ''}"/>  
            <figcaption>
              <span class="pj-gallery-image__caption">
                ${image.caption}
              </span>

              <span class="pj-gallery-image__credits">
                ${image.credits}
              </span>
            </figcaption>
          </figure>
        </div>
      `;
    });

    return  `
      <section class="pj-gallery pj-gallery__${data.simple ? 'simple' : 'full'}">
        ${images.join("")}
      </section>
     `
  }
});
{% endraw %}

