{% raw %}

CMS.registerEditorComponent({
  // Internal id of the component
  id: "links-tag",
  // Visible label
  label: "Links Tag",
  // Fields the user need to fill out when adding an instance of the component
  fields: [
    {
      name: 'title',
      label: 'Title',
      widget: 'string'
    },
    {
      name: 'items',
      label: 'Items',
      widget: 'list',
      summary: '{{fields.title}} - {{fields.url}}',
      fields: [
        { label: 'Title', name: 'title',  widget: 'string' },
        { label: 'URL', name: 'url',  widget: 'string' }
      ]
    },
    {
      name: 'icon',
      label: 'Icon',
      widget: 'string'
    }
  ],
  // Regex pattern used to search for instances of this block in the markdown document.
  // Patterns are run in a multline environment (against the entire markdown document),
  // and so generally should make use of the multiline flag (`m`). If you need to capture
  // newlines in your capturing groups, you can either use something like
  // `([\S\s]*)`, or you can additionally enable the "dot all" flag (`s`),
  // which will cause `(.*)` to match newlines as well.
  //
  // Additionally, it's recommended that you use non-greedy capturing groups (e.g.
  // `(.*?)` vs `(.*)`), especially if matching against newline characters.
  pattern: /{% links { "title": "(.*)", "icon": "(.*)", "items": (.*) } %}/,
  // Given a RegExp Match object
  // (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match#return_value),
  // return an object with one property for each field defined in `fields`.
  //
  // This is used to populate the custom widget in the markdown editor in the CMS.
  fromBlock: function(match) {
    const title = match[1];
    const icon = match[2];
    const items = JSON.parse(match[3]);
    
    return { title, icon, items };
  },
  // Given an object with one property for each field defined in `fields`,
  // return the string you wish to be inserted into your markdown.
  //
  // This is used to serialize the data from the custom widget to the
  // markdown document
  toBlock: function(data) {
    const items = data.items || [];
    const icon = data.icon || "svg/icon-link.liquid";

    return (
      `{% links { "title": "${data.title}", "icon": "${icon}", "items": ${JSON.stringify(items)} } %}`
    );
  },
  // Preview output for this component. Can either be a string or a React component
  // (component gives better render performance)
  toPreview: function(data) {
    let items = data.items.map(item => {
      return `
        <li>
          <a href="${item.url}" class="link link--extern">
            <span class="link__icon link__icon--left">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="svg-icon-link " alt="A link icon">
                <path fill="#fd4022" fill-rule="evenodd" d="M8.2 5.2c.3-.3.7-.5 1.2-.5s.9.2 1.2.5l6.2 6.2c.4-1.3.1-2.4-.9-3.4l-4-4c-.7-.7-1.5-1-2.5-1S7.6 3.3 7 4l-.9.9C5.4 5.6 5 6.5 5 7.4s.4 1.8 1.1 2.4l4.1 4.1c.9.9 2 1.2 3.3.9L7.2 8.6c-.3-.3-.5-.7-.5-1.2s.2-.9.5-1.2l1-1zM12.1 20c.7.7 1.5 1 2.5 1s1.8-.3 2.5-1l.9-.9c.7-.7 1.1-1.5 1.1-2.5s-.4-1.8-1.1-2.4L13.9 10c-.9-.9-2-1.2-3.3-.9l6.2 6.2c.3.3.5.7.5 1.2s-.2.9-.5 1.2l-.9.9c-.3.3-.7.5-1.2.5s-.9-.2-1.2-.5l-6.2-6.2c-.4 1.3-.1 2.4.9 3.4l3.9 4.2z" clip-rule="evenodd"></path>
              </svg>
            </span>
            
            <span class="link__label">
              ${item.title}
            </span>
          </a>
        </li>
      `;
    });

    return  `
      <section class="pj-links">
        <h3>${data.title}</h3>
        <ul class="llistat-links">
          ${items.join()}
        </ul>
      </section>
     `
  }
});
{% endraw %}

