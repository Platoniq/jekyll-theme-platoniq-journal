{% raw %}

CMS.registerEditorComponent({
  // Internal id of the component
  id: "author-block",
  // Visible label
  label: "Author",
  // Fields the user need to fill out when adding an instance of the component
  fields: [
    {
      name: "name",
      label: "Nombre",
      widget: "string"
    },
    {
      name: "position",
      label: "Puesto en la organización",
      widget: "string"
    },
    {
      name: "image",
      label: "Imagen", 
      widget: "image",
      default: "/assets/media/no_image-file.png",
      media_library: { config: { multiple: false } },
      media_folder: "/media/authors/"
    },
    {
      name: "description",
      label: "Descripción",
      widget: "markdown"
    }
  ],
  // Regex pattern used to search for instances of this block in the markdown document.
  // Patterns are run in a multline environment (against the entire markdown document),
  // and so generally should make use of the multiline flag (`m`). If you need to capture
  // newlines in your capturing groups, you can either use something like
  // `([\S\s]*)`, or you can additionally enable the "dot all" flag (`s`),
  // which will cause `(.*)` to match newlines as well.
  //
  // Additionally, it's recommended that you use non-greedy capturing groups (e.g.
  // `(.*?)` vs `(.*)`), especially if matching against newline characters.
  pattern: /{% author { "name": "(.*)", "position": "(.*)", "image": "(.*)"} %}{% author %}/,
  // Given a RegExp Match object
  // (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match#return_value),
  // return an object with one property for each field defined in `fields`.
  //
  // This is used to populate the custom widget in the markdown editor in the CMS.
  fromBlock: function(match) {
    return { };
  },
  // Given an object with one property for each field defined in `fields`,
  // return the string you wish to be inserted into your markdown.
  //
  // This is used to serialize the data from the custom widget to the
  // markdown document
  toBlock: function(data) {
    return `{% author %}`
  },
  // Preview output for this component. Can either be a string or a React component
  // (component gives better render performance)
   toPreview: function(data) {
    return  `
      <section class="pj-author">
        <div class="pj-author__img">
          <img src="/assets/media/no_image-cta.png" alt="Author preview"/>
        </div>
        
        <div class="pj-author__text">
          <h3 class="pj-author__text__name">Author Preview</h3>
          
          <p class="pj-author__text__bio">This text will hold the author bio defined in the collection</p>
        </div>
      </section>
     `
  }
});
{% endraw %}

