{% raw %}

CMS.registerEditorComponent({
  // Internal id of the component
  id: "questions-tag",
  // Visible label
  label: "Big Questions",
  // Fields the user need to fill out when adding an instance of the component
  fields: [
    {
      name: 'items',
      label: 'Preguntas',
      widget: 'list',
      summary: '{{fields.question}}',
      fields: [
        { label: 'Pregunta', name: 'question',  widget: 'string' }
      ]
    }
  ],
  // Regex pattern used to search for instances of this block in the markdown document.
  // Patterns are run in a multline environment (against the entire markdown document),
  // and so generally should make use of the multiline flag (`m`). If you need to capture
  // newlines in your capturing groups, you can either use something like
  // `([\S\s]*)`, or you can additionally enable the "dot all" flag (`s`),
  // which will cause `(.*)` to match newlines as well.
  //
  // Additionally, it's recommended that you use non-greedy capturing groups (e.g.
  // `(.*?)` vs `(.*)`), especially if matching against newline characters.
  pattern: /{% questions { "items": (.*) } %}/,
  // Given a RegExp Match object
  // (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match#return_value),
  // return an object with one property for each field defined in `fields`.
  //
  // This is used to populate the custom widget in the markdown editor in the CMS.
  fromBlock: function(match) {
    const items = JSON.parse(match[1]);
    
    return { items };
  },
  // Given an object with one property for each field defined in `fields`,
  // return the string you wish to be inserted into your markdown.
  //
  // This is used to serialize the data from the custom widget to the
  // markdown document
  toBlock: function(data) {
    const items = data.items || [];

    return `{% questions { "items": ${JSON.stringify(items)} } %}`
  },
  // Preview output for this component. Can either be a string or a React component
  // (component gives better render performance)
   toPreview: function(data) {
    let items = data.items.map(item => {
      return `
        <li class="pj-question">
          ${item.question}
        </li>
      `;
    });

    return  `
      <div class="pj-questions">
        <ul>
          ${items.join("")}
        </ul>
      </div>
     `
  }
});
{% endraw %}

